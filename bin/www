#!/usr/bin/env node

const app = require('../app')
const debug = require('debug')('f1trir:server')
const http = require('http')
const config = require('config')
const Database = require('../app/lib/Database')

const port = normalizePort(process.env.PORT || config.get('app.port'))
app.set('port', port)

const server = http.createServer(app)

Database.onConnect(() => {
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
  console.log('DB Connected')
})

Database.onDisconnect(() => {
  console.log('Database connection disconnected')
  process.exit(0)
})

Database.onError(err => {
  console.log(`Database connection error: ${err}`)
})

Database.connect()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on ' + port)
}
